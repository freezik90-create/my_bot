import os
from flask import Flask, request
import telebot
from telebot import types  # –ò—Å–ø–æ–ª—å–∑—É–µ–º types.InlineKeyboardMarkup –∏ types.InlineKeyboardButton
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from PIL import Image
import io
import json
import requests
import random

# === –ù–ê–°–¢–†–û–ô–ö–ò (–∑–∞–ø–æ–ª–Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render) ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

OWNER_ID = os.getenv("OWNER_ID")
if OWNER_ID:
    try:
        OWNER_ID = int(OWNER_ID)
    except:
        raise ValueError("OWNER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤–∞—à Telegram ID)")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@your_channel")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞

HF_API_KEY = os.getenv("HF_API_KEY")  # –î–ª—è Hugging Face (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")  # –î–ª—è Unsplash (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
bot = telebot.TeleBot(BOT_TOKEN)
scheduler = BackgroundScheduler()
app = Flask(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
HISTORY_FILE = "user_history.json"
QUEUE_FILE = "daily_queue.json"
CACHE_FILE = "image_cache.json"
POSTS_LOG_FILE = "published_posts.json"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def load_json(filename, default):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# === Webhook: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram ===
@app.route('/webhook', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_json())
    bot.process_new_updates([update])
    return 'OK', 200

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook ===
@app.route('/')
def home():
    bot.remove_webhook()
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
    bot.set_webhook(url=webhook_url)
    return "<h1>‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</h1>", 200

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data="about")
    btn2 = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    markup.add(btn1, btn2)
    
    bot.reply_to(
        message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à Telegram-–±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –Ω–∞ Render.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
        reply_markup=markup
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "about":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Render —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º webhook.\n\n"
                 "–û–Ω –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
        )
    elif call.data == "help":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üí° –ü–æ–º–æ—â—å:\n\n"
                 "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å\n"
                 "‚Ä¢ –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ inline-–º–µ–Ω—é\n"
                 "‚Ä¢ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Flask + webhook"
        )

# === –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
def scheduled_task():
    try:
        bot.send_message(OWNER_ID, f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {datetime.now().strftime('%H:%M:%S')}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω OWNER_ID)
if OWNER_ID:
    scheduler.add_job(scheduled_task, 'interval', minutes=5)
    scheduler.start()

# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == '__main__':
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç –æ—Ç Render
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

