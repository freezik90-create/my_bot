# bot.py
import telebot
import requests
import random
import json
import os
import time
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask, jsonify
from PIL import Image
import io

# === –ù–ê–°–¢–†–û–ô–ö–ò (–∑–∞–ø–æ–ª–Ω–∏ –≤ .env) ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")
OWNER_ID = int(os.getenv("OWNER_ID", 0))  # –í–∞—à Telegram ID
CHANNEL_ID = os.getenv("CHANNEL_ID", "@–≤–∞—à_–∫–∞–Ω–∞–ª")

HF_API_KEY = os.getenv("HF_API_KEY")
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
bot = telebot.TeleBot(BOT_TOKEN)
scheduler = BackgroundScheduler()
app = Flask(__name__)

# –§–∞–π–ª—ã
HISTORY_FILE = "user_history.json"
QUEUE_FILE = "daily_queue.json"
CACHE_FILE = "image_cache.json"
POSTS_LOG_FILE = "published_posts.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json(filename, default):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

user_history = load_json(HISTORY_FILE, {})
daily_queue = load_json(QUEUE_FILE, [])
image_cache = load_json(CACHE_FILE, {})
published_posts = load_json(POSTS_LOG_FILE, [])

# === –ö–ù–û–ü–ö–ò ===
def get_source_keyboard():
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üñº Unsplash", callback_data="src_unsplash"),
        InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ò–ò", callback_data="src_ai")
    )
    return markup

def get_suggestion_buttons():
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚ú® –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ", callback_data="suggest_realistic"),
        InlineKeyboardButton("üé® –ê–Ω–∏–º–µ", callback_data="suggest_anime")
    )
    markup.row(
        InlineKeyboardButton("üåå –í –∫–æ—Å–º–æ—Å–µ", callback_data="suggest_space"),
        InlineKeyboardButton("üè∞ –í –∑–∞–º–∫–µ", callback_data="suggest_castle")
    )
    markup.add(InlineKeyboardButton("üîÑ –°–ª—É—á–∞–π–Ω–æ–µ", callback_data="suggest_random"))
    return markup

def get_choose_photo_keyboard():
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üñº ‚Ññ1", callback_data="choose_1"),
        InlineKeyboardButton("üñº ‚Ññ2", callback_data="choose_2")
    )
    markup.row(
        InlineKeyboardButton("üñº ‚Ññ3", callback_data="choose_3"),
        InlineKeyboardButton("üñº ‚Ññ4", callback_data="choose_4")
    )
    return markup

def get_action_menu():
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üîÅ –ü–æ—Ö–æ–∂–µ–µ", callback_data="action_similar"),
        InlineKeyboardButton("üé® –°—Ç–∏–ª—å", callback_data="action_style")
    )
    markup.row(
        InlineKeyboardButton("‚úèÔ∏è –ü—Ä–æ–º–ø—Ç", callback_data="action_prompt"),
        InlineKeyboardButton("üì• –í –õ–°", callback_data="action_save")
    )
    return markup

# === –£–õ–£–ß–®–ï–ù–ò–ï –ü–†–û–ú–ü–¢–ê ===
def enhance_prompt(prompt, style=""):
    base = prompt
    if "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ" in style:
        base += ", —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, 8K, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
    elif "–∞–Ω–∏–º–µ" in style:
        base += ", –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ, Studio Ghibli"
    elif "–∫–æ—Å–º–æ—Å–µ" in style:
        base += ", –≤ –∫–æ—Å–º–æ—Å–µ, –≥–∞–ª–∞–∫—Ç–∏–∫–∞, –Ω–µ–æ–Ω"
    elif "–∑–∞–º–∫–µ" in style:
        base += ", –≤ —Å—Ç–∞—Ä–∏–Ω–Ω–æ–º –∑–∞–º–∫–µ, –º–∞–≥–∏—è, —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ"
    elif "random" in style:
        extras = [", –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ", ", –∞–∫–≤–∞—Ä–µ–ª—å", ", —Ü–∏—Ñ—Ä–æ–≤–∞—è –∂–∏–≤–æ–ø–∏—Å—å", ", –º–∏–Ω–∏–º–∞–ª–∏–∑–º"]
        base += random.choice(extras)
    return base

# === –ü–û–ò–°–ö –§–û–¢–û (–¢–û–õ–¨–ö–û UNSPLASH) ===
def search_unsplash(query, page=1):
    if not UNSPLASH_KEY:
        return []
        
    url = "https://api.unsplash.com/search/photos"
    headers = {"Authorization": f"Client-ID {UNSPLASH_KEY}"}
    params = {"query": query, "per_page": 6, "page": page}
    r = requests.get(url, headers=headers, params=params)
    return r.json().get("results", []) if r.status_code == 200 else []

# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ß–ï–†–ï–ó HUGGING FACE ===
def generate_hf_image(prompt):
    if not HF_API_KEY:
        return None
    if prompt in image_cache:
        return image_cache[prompt]

    API_URL = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}

    try:
        print(f"–ó–∞–ø—Ä–æ—Å –∫ Hugging Face: {prompt}")
        response = requests.post(API_URL, headers=headers, json={"inputs": prompt})
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å "—Å–ø–∏—Ç" ‚Äî –∂–¥—ë–º 10 —Å–µ–∫ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        if response.status_code == 503:
            print("–ú–æ–¥–µ–ª—å —Å–ø–∏—Ç... –∂–¥—ë–º 10 —Å–µ–∫")
            time.sleep(10)
            response = requests.post(API_URL, headers=headers, json={"inputs": prompt})
        
        if response.status_code == 200:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
            img = Image.open(io.BytesIO(response.content))
            bio = io.BytesIO()
            bio.name = 'image.jpg'
            img.save(bio, 'JPEG')
            bio.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id
            sent = bot.send_photo(OWNER_ID, bio)
            file_id = sent.photo[-1].file_id
            url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_id}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            image_cache[prompt] = url
            save_json(CACHE_FILE, image_cache)
            return url
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Hugging Face:", e)
    
    return None

# === –û–¢–ü–†–ê–í–ö–ê 6 –§–û–¢–û (–¢–û–õ–¨–ö–û UNSPLASH) ===
@bot.message_handler(commands=['start'])
def start(message):
    cid = message.chat.id
    bot.send_message(cid, "–û—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: *–∫–æ—à–∫–∏ –≤ –æ—á–∫–∞—Ö*", parse_mode="Markdown")
    bot.send_message(cid, "–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=get_source_keyboard())
    user_context[cid] = {"state": "awaiting_query"}

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
user_context = {}

@bot.message_handler(func=lambda m: True)
def handle_query(message):
    cid = message.chat.id
    query = message.text.strip()
    if len(query) < 2:
        return bot.send_message(cid, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    if str(cid) not in user_history:
        user_history[str(cid)] = []
    user_history[str(cid)].append(query)
    save_json(HISTORY_FILE, user_history)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ Unsplash)
    images = [(img, "unsplash") for img in search_unsplash(query)]
    
    if not images:
        bot.send_message(cid, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    for i, (img, src) in enumerate(images[:6]):
        url = img["urls"]["regular"]
        author = img["user"]["name"]
        bot.send_photo(cid, url, caption=f"üñº {query}\n–ê–≤—Ç–æ—Ä: {author}")

    # –ú–µ–Ω—é
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ò–ò", callback_data="ai_start"))
    bot.send_message(cid, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

    user_context[cid] = {"last_query": query}

# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ò ===
@bot.callback_query_handler(func=lambda c: c.data == "ai_start")
def ai_start(call):
    cid = call.message.chat.id
    ctx = user_context.get(cid, {})
    query = ctx.get("last_query", "–∏—Å–∫—É—Å—Å—Ç–≤–æ")
    bot.edit_message_text(chat_id=cid, message_id=call.message.message_id, text=f"–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å:\n\n*{query}*", parse_mode="Markdown", reply_markup=get_suggestion_buttons())

@bot.callback_query_handler(func=lambda c: c.data.startswith("suggest_"))
def suggest(call):
    cid = call.message.chat.id
    style = call.data.split("_")[1]
    ctx = user_context.get(cid, {})
    query = ctx.get("last_query", "–∏—Å–∫—É—Å—Å—Ç–≤–æ")
    enhanced = enhance_prompt(query, style)
    user_context[cid]["ai_prompt"] = enhanced

    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ai_gen"),
        InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–π", callback_data="ai_custom")
    )
    bot.edit_message_text(chat_id=cid, message_id=call.message.message_id, text=f"–£–ª—É—á—à–µ–Ω–æ:\n\n*{enhanced}*", parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "ai_custom")
def ai_custom(call):
    cid = call.message.chat.id
    msg = bot.edit_message_text(chat_id=cid, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç:")
    bot.register_next_step_handler(msg, custom_prompt_step)

def custom_prompt_step(message):
    cid = message.chat.id
    user_context[cid]["ai_prompt"] = message.text.strip()
    ai_generate(cid)

def ai_generate(cid):
    prompt = user_context[cid]["ai_prompt"]
    bot.send_message(cid, "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞...")

    results = []
    for _ in range(4):
        url = generate_hf_image(prompt)
        if url:
            results.append(url)
        if len(results) == 4:
            break

    if not results:
        return bot.send_message(cid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    media = [telebot.types.InputMediaPhoto(results[0], caption=f"üé® –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n{prompt}\n–í—ã–±–µ—Ä–∏ –ª—É—á—à–µ–µ:")]
    for url in results[1:]:
        media.append(telebot.types.InputMediaPhoto(url))
    sent = bot.send_media_group(cid, media)
    user_context[cid]["ai_images"] = results
    user_context[cid]["ai_media_ids"] = [m.message_id for m in sent]

    bot.send_message(cid, "–ö–∞–∫–æ–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?", reply_markup=get_choose_photo_keyboard())

@bot.callback_query_handler(func=lambda c: c.data.startswith("choose_"))
def choose_img(call):
    cid = call.message.chat.id
    num = int(call.data.split("_")[1])
    user_context[cid]["chosen"] = num - 1
    bot.edit_message_text(chat_id=cid, message_id=call.message.message_id, text=f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Ñ–æ—Ç–æ ‚Ññ{num}", reply_markup=None)
    bot.send_message(cid, "–î–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_action_menu())

# === –î–ï–ô–°–¢–í–ò–Ø –ü–û–°–õ–ï –í–´–ë–û–†–ê ===
@bot.callback_query_handler(func=lambda c: c.data == "action_similar")
def similar(call):
    cid = call.message.chat.id
    num = user_context[cid]["chosen"]
    prompt = user_context[cid]["ai_prompt"]
    new_prompt = f"–ü–æ—Ö–æ–∂–µ–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ, –Ω–æ —Å –¥—Ä—É–≥–∏–º —Ä–∞–∫—É—Ä—Å–æ–º: {prompt}"
    user_context[cid]["ai_prompt"] = new_prompt
    ai_generate(cid)

@bot.callback_query_handler(func=lambda c: c.data == "action_save")
def save(call):
    cid = call.message.chat.id
    num = user_context[cid]["chosen"]
    url = user_context[cid]["ai_images"][num]
    bot.send_photo(OWNER_ID, url, caption=f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {cid}")
    bot.answer_callback_query(call.id, "‚úÖ –í –õ–°!")

# === –ê–í–¢–û–ü–û–°–¢–ò–ù–ì –í –ö–ê–ù–ê–õ (–¢–û–õ–¨–ö–û UNSPLASH) ===
def generate_daily_queue():
    global daily_queue
    all_queries = [q for hist in user_history.values() for q in hist]
    if not all_queries:
        all_queries = ["–ø—Ä–∏—Ä–æ–¥–∞", "–∫–æ—à–∫–∏", "–≥–æ—Ä–æ–¥"]
    top = [q for q, _ in sorted({q: all_queries.count(q) for q in set(all_queries)}.items(), key=lambda x: -x[1])[:5]]
    daily_queue = [{"query": random.choice(top), "src": "unsplash"} for _ in range(100)]
    save_json(QUEUE_FILE, daily_queue)

def post_one():
    global daily_queue
    if not daily_queue:
        return

    post = daily_queue.pop(0)
    query = post["query"]
    img_url = None
    caption = f"‚ú® {query}\n\n#–∞–≤—Ç–æ #–ø–æ–¥–±–æ—Ä–∫–∞"

    try:
        if UNSPLASH_KEY:
            images = search_unsplash(query)
            if images:
                img = random.choice(images)
                img_url = img["urls"]["regular"]
                author = img["user"]["name"]
                caption += f"\n–ê–≤—Ç–æ—Ä: {author}"

        if img_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            bot.send_photo(CHANNEL_ID, img_url, caption=caption)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è Instagram
            log_post(img_url, caption, "unsplash", query)
            
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞:", e)
        daily_queue.append(post)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å

    save_json(QUEUE_FILE, daily_queue)

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø INSTAGRAM ===
def log_post(image_url, caption, source, query):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Instagram"""
    post_data = {
        "image_url": image_url,
        "caption": caption,
        "source": source,
        "query": query,
        "published_at": datetime.now().isoformat(),
        "instagram_posted": False
    }
    published_posts.append(post_data)
    save_json(POSTS_LOG_FILE, published_posts)

# === –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø n8n ===
@app.route('/instagram-posts')
def get_instagram_posts():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç—ã –¥–ª—è Instagram (–Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ)"""
    pending = [p for p in published_posts if not p["instagram_posted"]]
    return jsonify(pending[:5])  # –¢–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö

@app.route('/mark-instagram/<int:index>', methods=['POST'])
def mark_as_posted(index):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –≤ Instagram"""
    if 0 <= index < len(published_posts):
        published_posts[index]["instagram_posted"] = True
        save_json(POSTS_LOG_FILE, published_posts)
        return jsonify({"status": "ok"})
    return jsonify({"error": "invalid index"}), 400

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    if OWNER_ID == 0 or not UNSPLASH_KEY:
        print("‚ùó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OWNER_ID –∏ UNSPLASH_KEY")
    else:
        scheduler.add_job(generate_daily_queue, 'cron', hour=0, minute=5)
        scheduler.add_job(post_one, 'interval', minutes=15)
        scheduler.start()

        from threading import Thread
        Thread(target=lambda: app.run(port=10000, debug=False, use_reloader=False)).start()

        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        bot.infinity_polling()
